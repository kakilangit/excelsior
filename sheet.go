package excelsior

import "github.com/xuri/excelize/v2"

// SheetProvider is the interface for the Excel sheet.
type SheetProvider interface {
	SheetBase
	SheetData
}

// Row represents Excel row.
type Row []any

// GetStyleByColIDFn is signature function for get the style by providing column number.
type GetStyleByColIDFn func(colID int) int

// SheetBase is the interface generated by excelsior.Sheet, reducing the boiler-plates.
type SheetBase interface {
	TotalColumn() int
	HeaderRow() Row
	HeaderRowStyle() GetStyleByColIDFn
	RowStyle() GetStyleByColIDFn
}

// SheetData is the interface need to be provided by the user of excelsior.
type SheetData interface {
	Total() int    // total data
	Row(i int) Row //
}

// Sheet implements SheetProvider interface.
type Sheet struct {
	SheetData
	headerRow     Row
	rowGetStyleFn GetStyleByColIDFn
	headStyleID   int
}

// NewSheet will create new Sheet.
func NewSheet(headerRow Row, rowGetStyleFn GetStyleByColIDFn, headStyleID int, data SheetData) *Sheet {
	return &Sheet{
		SheetData:     data,
		headerRow:     headerRow,
		rowGetStyleFn: rowGetStyleFn,
		headStyleID:   headStyleID,
	}
}

// HeaderRow returns rows for header.
func (s Sheet) HeaderRow() Row {
	return s.headerRow
}

// TotalColumn returns total column.
func (s Sheet) TotalColumn() int {
	return len(s.headerRow)
}

// HeaderRowStyle returns the style rowSetter for the header row.
func (s Sheet) HeaderRowStyle() GetStyleByColIDFn {
	return func(_ int) int {
		return s.headStyleID
	}
}

// RowStyle returns the style rowSetter for the remaining row.
func (s Sheet) RowStyle() GetStyleByColIDFn {
	return s.rowGetStyleFn
}

// Generate creates Excel sheet with provided excelize.File, and sheet name.
func (s Sheet) Generate(file *excelize.File, name string) error {
	return GenerateSheet(file, name, s)
}
